{"version":3,"sources":["Certifications.js","loginPage.js","App.js","index.js"],"names":["Certifications","props","state","exerciseName","exerciseOOB","exercisePOD","exerciseType","exerciseLive","fieldApprove","fileApprove","artilleryApprove","exerciseManager","trainerOfficerApprove","cerRes","fieldApproveOptions","handleChange","bind","handleSubmit","fetch","then","response","json","setState","console","log","catch","error","event","target","value","name","this","preventDefault","data","encodeURIComponent","exerciseBy","method","headers","body","JSON","stringify","i","fluid","center","md","className","onSubmit","label","group","type","validate","success","onChange","htmlFor","min","id","list","defaultValue","map","option","key","rank","firstName","lastName","color","Component","loginPage","duty","force","email","password","icon","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2136c0a3.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { MDBContainer, MDBRow, MDBCol, MDBBtn, MDBInput } from 'mdbreact';\n\nimport './Certifications.css'\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\n\nclass Certifications extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            exerciseName: '',\n            //exerciseBy: '',  autofill current user from session\n            exerciseOOB: '',\n            exercisePOD: '',\n            exerciseType: '', // options should be pull from db\n            exerciseLive: '',\n            fieldApprove: '', // options should be pull from db\n            fileApprove: '', // options should be pull from db\n            artilleryApprove: '', // options should be pull from db\n            exerciseManager: '', // options should be pull from db\n            trainerOfficerApprove: '', // options should be pull from db\n            cerRes: '',\n            fieldApproveOptions: []\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    componentDidMount() {\n        // parameters should be from current user\n        fetch('/api/certifications/fieldApproveOptions?userId=1234567&rank=Colonel&force=Moran')\n            .then(response => response.json())\n            .then(state => this.setState(state), () => console.log(\"here\"))\n            .catch((error) => {\n                console.error('Error:', error);\n                this.setState({ cerRes: 'Error' })\n            });\n    }\n\n    handleChange(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n\n        this.setState({ [name]: value });\n        console.log(\"name: \" + name + \". value:\" + value)\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n\n        /*\n        let exerciseName = encodeURIComponent(this.state.exerciseName)\n        //let exerciseBy = autofill current user from session\n        let exerciseType = encodeURIComponent(this.state.exerciseType)\n        let fieldApprove = encodeURIComponent(this.state.fieldApprove)\n        let fileApprove = encodeURIComponent(this.state.fileApprove)\n        let artilleryApprove = encodeURIComponent(this.state.artilleryApprove)\n        let exerciseManager = encodeURIComponent(this.state.exerciseManager)\n        let trainerOfficerApprove = encodeURIComponent(this.state.trainerOfficerApprove)\n\n        fetch(`/api/certifications?exerciseName=${exerciseName}&exerciseType=${exerciseType}` +\n            `&fieldApprove=${fieldApprove}&fileApprove=${fileApprove}&artilleryApprove=${artilleryApprove}` +\n            `&exerciseManager=${exerciseManager}&trainerOfficerApprove=${trainerOfficerApprove}` +\n            `&exerciseAuthorId=1234567`)\n            .then(response => response.json())\n            .then(state => this.setState(state));\n        */\n\n        let data = {\n            exerciseName: encodeURIComponent(this.state.exerciseName),\n            exerciseBy: '1234567', // autofill current user from session\n            exerciseOOB: encodeURIComponent(this.state.exerciseOOB),\n            exercisePOD: encodeURIComponent(this.state.exercisePOD),\n            exerciseType: encodeURIComponent(this.state.exerciseType),\n            exerciseLive: encodeURIComponent(this.state.exerciseLive),\n            fieldApprove: encodeURIComponent(this.state.fieldApprove),\n            fileApprove: encodeURIComponent(this.state.fileApprove),\n            artilleryApprove: encodeURIComponent(this.state.artilleryApprove),\n            exerciseManager: encodeURIComponent(this.state.exerciseManager),\n            trainerOfficerApprove: encodeURIComponent(this.state.trainerOfficerApprove)\n        }\n\n\n\n        fetch('/api/certifications', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(data),\n        })\n            .then((response) => response.json())\n            .then((state) => {\n                this.setState(state)\n            })\n            .catch((error) => {\n                console.error('Error:', error);\n                this.setState({ cerRes: 'Error' })\n            });\n\n    }\n\n\n    render() {\n        let i = 0\n        return (\n            <MDBContainer fluid>\n                <MDBRow center>\n                    <MDBCol md=\"4\">\n                        <div className=\"Certifications\">\n                            <header className=\"Certifications-header\">\n                                <p className=\"h1 text-center\">Certifications</p>\n\n                                <br />\n\n                                <form onSubmit={this.handleSubmit}>\n                                  {/*exercise name */}\n                                    <MDBInput\n                                        label=\"Exercise name\"\n                                        name=\"exerciseName\"\n                                        group\n                                        type=\"text\"\n                                        validate\n                                        error=\"wrong\"\n                                        success=\"right\"\n                                        onChange={this.handleChange}\n                                        value={this.state.exerciseName}\n                                    />\n\n                                    {/*exerciseType section */}\n\n                                    {/*Order of battle */}\n                                    <label className=\"h5\">Exercise type: </label>\n                                    <br />\n                                    <label htmlFor=\"exerciseOOB\">Order of battle: </label>\n                                    <input\n                                        onChange={this.handleChange}\n                                        name=\"exerciseOOB\"\n                                        type=\"number\"\n                                        min=\"20\"\n                                    />\n\n\n                                    {/*pod section */}\n                                    <div className='container' onChange={this.handleChange}>\n                                        <label className=\"h6\" htmlFor=\"exercisePOD\"> part of a day: </label>\n                                        {/*night button */}\n                                        <input type=\"radio\" name=\"exercisePOD\" id=\"night\" value=\"night\" />\n                                        < label htmlFor=\"night\"> night </label>\n                                        {/*day button */}\n                                        <input type=\"radio\" name=\"exercisePOD\" id=\"day\" value=\"day\" />\n                                        < label htmlFor=\"day\"> day </label>\n                                    </div>\n\n\n                                    {/*type button */}\n                                    <label className=\"h6\" htmlFor=\"exerciseType\">Types: </label>\n                                    <input list=\"types\" name=\"exerciseType\" onChange={this.handleChange} />\n                                    <datalist id=\"types\" >\n                                        <option value=\"1\" name=\"Open Terrain\"></option>\n                                        <option value=\"2\" >Urban warfare</option>\n                                        <option value=\"3\" >Armoured fighting vechicle</option>\n                                        <option value=\"4\" >unplanned</option>\n                                        <option value=\"5\" >live military exercise</option>\n                                    </datalist>\n\n\n                                    {/*live exercise button */}\n                                    <input type=\"checkbox\" onChange={this.handleChange} name=\"exerciseLive\" id=\"live\" value=\"on\" />\n                                    <label htmlFor=\"live\">live exercise</label><br></br>\n\n                                    <br />\n\n                                    {/*FieldApprove button */}\n                                    <label className=\"h6\" htmlFor=\"fieldApprove\">Field approve: </label>\n                                    <input type=\"text\" list=\"fieldApproves\" name=\"fieldApprove\" />\n                                    <datalist id=\"fieldApproves\" defaultValue>\n\n                                        {this.state.fieldApproveOptions.map(option =>\n                                            <option key={i++} value={option.id}>{option.rank + \" \" + option.firstName + \" \" + option.lastName}</option>)}\n                                    </datalist>\n\n\n                                    <br />\n\n                                    {/*FileApprove button */}\n                                    <label className=\"h6\" htmlFor=\"fileApprove\">File approve: </label>\n                                    <input\n                                        name=\"fileApprove\"\n                                        type=\"text\"\n                                        value={this.state.fileApprove}\n                                        onChange={this.handleChange} />\n\n                                    <br />\n                                     {/*artillery Approve button */}\n\n                                    <label className=\"h6\" htmlFor=\"artilleryApprove\">Artillery approve: </label>\n                                    <input\n                                        name=\"artilleryApprove\"\n                                        type=\"text\"\n                                        value={this.state.artilleryApprove}\n                                        onChange={this.handleChange} />\n\n                                    <br />\n                                     {/*exerciseManager Approve button */}\n\n                                    <label htmlFor=\"exerciseManager\">Exercise manager: </label>\n                                    <input\n                                        name=\"exerciseManager\"\n                                        type=\"text\"\n                                        value={this.state.exerciseManager}\n                                        onChange={this.handleChange} />\n\n                                    <br />\n                                     {/*trainerOfficer Approve button */}\n\n                                    <label htmlFor=\"trainerOfficerApprove\">Trainer officer approve: </label>\n                                    <input\n                                        name=\"trainerOfficerApprove\"\n                                        type=\"text\"\n                                        value={this.state.trainerOfficerApprove}\n                                        onChange={this.handleChange} />\n\n                                    <br />\n\n\n                                    <div className=\"text-center\">\n                                        <MDBBtn color=\"primary\">Send</MDBBtn>\n                                    </div>\n                                </form >\n\n                                <p><strong>{this.state.cerRes}</strong></p>\n                                <p><strong>{this.state.fieldApprove}</strong></p>\n                            </header >\n                        </div >\n                    </MDBCol>\n                </MDBRow>\n            </MDBContainer >\n        );\n    }\n}\nexport default Certifications;","import React, { Component } from \"react\";\nimport { MDBContainer, MDBRow, MDBCol, MDBBtn, MDBInput } from \"mdbreact\";\nclass loginPage extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n\n            firstName: \"\",\n            lastName: \"\",\n            rank: \"\",\n            id: \"\",\n            duty: \"\",\n            force: \"\",\n            email: \"\",\n            password: \"\",\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    handleChange(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n\n        this.setState({ [name]: value });\n        console.log(\"name: \" + name + \". value:\" + value)\n    }\n    handleSubmit(event) {\n        event.preventDefault();\n        let loginPageData = {\n            firstName: encodeURIComponent(this.state.firstName),\n            lastName: encodeURIComponent(this.state.lastName),\n            rank: encodeURIComponent(this.state.rank),\n            id: encodeURIComponent(this.state.id),\n            duty: encodeURIComponent(this.state.duty),\n            force: encodeURIComponent(this.state.force),\n            email: encodeURIComponent(this.state.email),\n            password: encodeURIComponent(this.state.password),\n        }\n    }\n\n\n    render() {\n        return (\n            <MDBContainer fluid>\n                <MDBRow center>\n                    <MDBCol md=\"4\">\n                        <form>\n                            <p className=\"h1 text-center\">Sign up</p>\n                            <div className=\"grey-text\">\n                                <MDBInput\n                                    label=\"Your first name\"\n                                    icon=\"user\"\n                                    name=\"firstName\"\n                                    group\n                                    type=\"text\"\n                                    validate\n                                    error=\"wrong\"\n                                    success=\"right\"\n                                    onChange={this.handleChange}\n                                    value={this.state.exerciseName}\n                                />\n                                <MDBInput\n                                    label=\"Your last name\"\n                                    icon=\"user\"\n                                    group\n                                    type=\"text\"\n                                    validate\n                                    error=\"wrong\"\n                                    success=\"right\"\n                                />\n                                <MDBInput\n                                    label=\"Your rank\"\n                                    icon=\"angle-double-down\"\n                                    group\n                                    type=\"text\"\n                                    validate\n                                    error=\"wrong\"\n                                    success=\"right\"\n                                />\n                                <MDBInput\n                                    label=\"Your identity number\"\n                                    icon=\"id-badge\"\n                                    group\n                                    type=\"text\"\n                                    validate\n                                    error=\"wrong\"\n                                    success=\"right\"\n                                />\n                                <MDBInput\n                                    label=\"Your duty\"\n                                    icon=\"exclamation-triangle\"\n                                    group\n                                    type=\"text\"\n                                    validate\n                                    error=\"wrong\"\n                                    success=\"right\"\n                                />\n                                <MDBInput\n                                    label=\"Your force\"\n                                    icon=\"hand-rock\"\n                                    group\n                                    type=\"text\"\n                                    validate\n                                    error=\"wrong\"\n                                    success=\"right\"\n                                />\n                                <MDBInput\n                                    label=\"Your email\"\n                                    icon=\"envelope\"\n                                    group\n                                    type=\"email\"\n                                    validate\n                                    error=\"wrong\"\n                                    success=\"right\"\n                                />\n                                <MDBInput\n                                    label=\"Your password\"\n                                    icon=\"lock\"\n                                    group\n                                    type=\"password\"\n                                    validate\n                                />\n                            </div>\n                            <div className=\"text-center\">\n                                <MDBBtn color=\"primary\">Register</MDBBtn>\n                            </div>\n                        </form>\n                    </MDBCol>\n                </MDBRow>\n            </MDBContainer>\n        );\n    }\n}\nexport default loginPage;\n","import React from 'react';\nimport Certifications from './Certifications'\nimport LoginPage from './loginPage'\n\nfunction App() {\n  return (\n\n    <div className=\"App\">\n      <header className=\"App-header\">\n      </header>\n      <LoginPage />\n      <Certifications />\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}